<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>
  <PropertyGroup>
    <Title>Hypar Elements Triangulation Utilities</Title>
    <PackageDescription>A very thin wrapper around VoronatorSharp.</PackageDescription>
    <PackageId>Elements.Triangulation</PackageId>
    <PackageProjectUrl>
      https://github.com/hypar-io/Elements.Triangulation</PackageProjectUrl>
    <Version>1.0.2</Version>
    <Authors>Andrew Heumann</Authors>
    <Company>Hypar</Company>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageReadmeFile>Readme.md</PackageReadmeFile>
  </PropertyGroup>
  <ItemGroup>
    <None Include=".\Readme.md" Pack="true" PackagePath="\" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Hypar.Elements" Version="2.1.0" />
  </ItemGroup>

  <ItemGroup>
    <!-- If we do this, the nuget package will fail to load, as it always wants to resolve a reference from another nuget package. we have to use the hard-coded DLL instead. -->
    <!-- <ProjectReference Include="../voronator-sharp/src/VoronatorSharp/VoronatorSharp.csproj">
      <IncludeAssets>all</IncludeAssets>
      <PrivateAssets>none</PrivateAssets>
    </ProjectReference> -->
  </ItemGroup>

  <ItemGroup>
    <!-- Add a direct reference to the DLL -->
    <Reference Include="VoronatorSharp">
      <HintPath>./dependencies/VoronatorSharp.dll</HintPath>
    </Reference>
  </ItemGroup>

  <ItemGroup>
    <!-- Include the DLL in the NuGet package -->
    <Content Include="./dependencies/VoronatorSharp.dll" Pack="true" PackagePath="lib/net6.0" />
  </ItemGroup>

</Project>